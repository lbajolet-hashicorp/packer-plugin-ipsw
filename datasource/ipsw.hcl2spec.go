// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package ipsw

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	OS               *string `mapstructure:"os" required:"true" cty:"os" hcl:"os"`
	Version          *string `mapstructure:"version" required:"true" cty:"version" hcl:"version"`
	Device           *string `mapstructure:"device" required:"true" cty:"device" hcl:"device"`
	Offline          *bool   `mapstructure:"offline" cty:"offline" hcl:"offline"`
	AppleDBGitURL    *string `mapstructure:"appledb_git_url" cty:"appledb_git_url" hcl:"appledb_git_url"`
	AppleDBLocalPath *string `mapstructure:"appledb_local_path" cty:"appledb_local_path" hcl:"appledb_local_path"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"os":                 &hcldec.AttrSpec{Name: "os", Type: cty.String, Required: false},
		"version":            &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"device":             &hcldec.AttrSpec{Name: "device", Type: cty.String, Required: false},
		"offline":            &hcldec.AttrSpec{Name: "offline", Type: cty.Bool, Required: false},
		"appledb_git_url":    &hcldec.AttrSpec{Name: "appledb_git_url", Type: cty.String, Required: false},
		"appledb_local_path": &hcldec.AttrSpec{Name: "appledb_local_path", Type: cty.String, Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	OS                *string                `mapstructure:"os" cty:"os" hcl:"os"`
	Version           *string                `mapstructure:"version" cty:"version" hcl:"version"`
	Build             *string                `mapstructure:"build" cty:"build" hcl:"build"`
	Released          *string                `mapstructure:"released" cty:"released" hcl:"released"`
	Beta              *bool                  `mapstructure:"beta" cty:"beta" hcl:"beta"`
	URL               *string                `mapstructure:"url" cty:"url" hcl:"url"`
	VersionComponents *FlatVersionComponents `mapstructure:"version_components" cty:"version_components" hcl:"version_components"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"os":                 &hcldec.AttrSpec{Name: "os", Type: cty.String, Required: false},
		"version":            &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"build":              &hcldec.AttrSpec{Name: "build", Type: cty.String, Required: false},
		"released":           &hcldec.AttrSpec{Name: "released", Type: cty.String, Required: false},
		"beta":               &hcldec.AttrSpec{Name: "beta", Type: cty.Bool, Required: false},
		"url":                &hcldec.AttrSpec{Name: "url", Type: cty.String, Required: false},
		"version_components": &hcldec.BlockSpec{TypeName: "version_components", Nested: hcldec.ObjectSpec((*FlatVersionComponents)(nil).HCL2Spec())},
	}
	return s
}

// FlatVersionComponents is an auto-generated flat version of VersionComponents.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVersionComponents struct {
	Major      *uint64 `mapstructure:"major" cty:"major" hcl:"major"`
	Minor      *uint64 `mapstructure:"minor" cty:"minor" hcl:"minor"`
	Patch      *uint64 `mapstructure:"patch" cty:"patch" hcl:"patch"`
	Prerelease *string `mapstructure:"prerelease" cty:"prerelease" hcl:"prerelease"`
	Metadata   *string `mapstructure:"metadata" cty:"metadata" hcl:"metadata"`
}

// FlatMapstructure returns a new FlatVersionComponents.
// FlatVersionComponents is an auto-generated flat version of VersionComponents.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VersionComponents) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVersionComponents)
}

// HCL2Spec returns the hcl spec of a VersionComponents.
// This spec is used by HCL to read the fields of VersionComponents.
// The decoded values from this spec will then be applied to a FlatVersionComponents.
func (*FlatVersionComponents) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"major":      &hcldec.AttrSpec{Name: "major", Type: cty.Number, Required: false},
		"minor":      &hcldec.AttrSpec{Name: "minor", Type: cty.Number, Required: false},
		"patch":      &hcldec.AttrSpec{Name: "patch", Type: cty.Number, Required: false},
		"prerelease": &hcldec.AttrSpec{Name: "prerelease", Type: cty.String, Required: false},
		"metadata":   &hcldec.AttrSpec{Name: "metadata", Type: cty.String, Required: false},
	}
	return s
}
